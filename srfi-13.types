(check-substring-spec (#(procedure #:clean #:enforce) check-substring-spec (* string fixnum fixnum) undefined))
(kmp-step (#(procedure #:enforce) kmp-step (string vector char fixnum (procedure (char char) *) fixnum) fixnum))
(make-kmp-restart-vector (#(procedure #:clean #:enforce) make-kmp-restart-vector (string #!optional (procedure (* *) *) fixnum fixnum) vector))

(string-any
 (forall (a)
  (#(procedure #:enforce)
   string-any
   ((or char (struct char-set) (procedure (char) a)) string #!optional fixnum fixnum)
   (or boolean a))))

(string-append/shared (#(procedure #:clean #:enforce) string-append/shared (#!rest string) string)
                      ((string string) (##sys#string-append #(1) #(2))))

(string-ci< (#(procedure #:clean #:enforce) string-ci< (string string #!optional fixnum fixnum) boolean)
            ((string string) (string-ci<? #(1) #(2))))

(string-ci<= (#(procedure #:clean #:enforce) string-ci<= (string string #!optional fixnum fixnum) boolean)
             ((string string) (string-ci<=? #(1) #(2))))

(string-ci<> (#(procedure #:clean #:enforce) string-ci<> (string string #!optional fixnum fixnum) boolean)
             ((string string) (not (##core#inline "C_i_string_ci_equal_p" #(1) #(2)))))

(string-ci= (#(procedure #:clean #:enforce) string-ci= (string string #!optional fixnum fixnum) boolean)
            ((string string) (##core#inline "C_i_string_ci_equal_p" #(1) #(2))))

(string-ci> (#(procedure #:clean #:enforce) string-ci> (string string #!optional fixnum fixnum) boolean)
            ((string string) (string-ci>? #(1) #(2))))

(string-ci>= (#(procedure #:clean #:enforce) string-ci>= (string string #!optional fixnum fixnum) boolean)
             ((string string) (string-ci>=? #(1) #(2))))

(string-compare (#(procedure #:enforce) string-compare (string string (procedure (fixnum) *) (procedure (fixnum) *) (procedure (fixnum) *) #!optional fixnum fixnum fixnum fixnum) *))
(string-compare-ci (#(procedure #:enforce) string-compare (string string (procedure (fixnum) *) (procedure (fixnum) *) (procedure (fixnum) *) #!optional fixnum fixnum fixnum fixnum) *))
(string-concatenate (#(procedure #:clean #:enforce) string-concatenate ((list-of string)) string))
(string-concatenate-reverse (#(procedure #:clean #:enforce) string-concatenate-reverse ((list-of string) #!optional string fixnum) string))
(string-concatenate-reverse/shared (#(procedure #:clean #:enforce) string-concatenate-reverse/shared ((list-of string) #!optional string fixnum) string))
(string-concatenate/shared (#(procedure #:clean #:enforce) string-concatenate/shared ((list-of string)) string))
(string-contains (#(procedure #:clean #:enforce) string-contains (string string #!optional fixnum fixnum fixnum fixnum) (or fixnum false)))
(string-contains-ci (#(procedure #:clean #:enforce) string-contains-ci (string string #!optional fixnum fixnum fixnum fixnum) (or fixnum false)))
(string-copy (#(procedure #:clean #:enforce) string-copy (string #!optional fixnum fixnum) string))
(string-copy! (#(procedure #:clean #:enforce) string-copy! (string fixnum string #!optional fixnum fixnum) undefined))
(string-count (#(procedure #:clean #:enforce) string-count (string * #!optional fixnum fixnum) fixnum))
(string-delete (#(procedure #:clean #:enforce) string-delete (* string #!optional fixnum fixnum) string))
(string-downcase (#(procedure #:clean #:enforce) string-downcase (string #!optional fixnum fixnum) string))
(string-downcase! (#(procedure #:clean #:enforce) string-downcase! (string #!optional fixnum fixnum) string))
(string-drop (#(procedure #:clean #:enforce) string-drop (string fixnum) string))
(string-drop-right (#(procedure #:clean #:enforce) string-drop-right (string fixnum) string))

(string-every
 (forall (a)
  (#(procedure #:enforce)
   string-every
   ((or char (struct char-set) (procedure (char) a)) string #!optional fixnum fixnum)
   (or boolean a))))

(string-fill! (#(procedure #:clean #:enforce) string-fill! (string char #!optional fixnum fixnum) string))

(string-filter
 (#(procedure #:enforce)
  string-filter
  ((or char (struct char-set) (procedure (char) *)) string #!optional fixnum fixnum)
  string))

(string-fold (#(procedure #:enforce) string-fold ((procedure (char *) *) * string #!optional fixnum fixnum) *)) ;XXX

(string-fold-right (#(procedure #:enforce) string-fold-right ((procedure (char *) *) * string #!optional fixnum fixnum) *)) ;XXX
(string-for-each (#(procedure #:enforce) string-for-each ((procedure (char) . *) string #!optional fixnum fixnum) undefined))
(string-for-each-index (#(procedure #:enforce) string-for-each-index ((procedure (fixnum) . *) string #!optional fixnum fixnum) undefined))

(string-index
 (#(procedure #:enforce)
  string-index
  (string (or char (struct char-set) (procedure (char) *)) #!optional fixnum fixnum)
  (or fixnum false)))

(string-index-right
 (#(procedure #:enforce)
  string-index-right
  (string (or char (struct char-set) (procedure (char) *)) #!optional fixnum fixnum)
  (or fixnum false)))

(string-join (#(procedure #:clean #:enforce) string-join (list #!optional string symbol) string))
(string-kmp-partial-search (#(procedure #:enforce) string-kmp-partial-search (string vector string fixnum #!optional (procedure (char char) *) fixnum fixnum fixnum) fixnum))
(string-map (#(procedure #:enforce) string-map ((procedure (char) char) string #!optional fixnum fixnum) string))
(string-map! (#(procedure #:enforce) string-map! ((procedure (char) char) string #!optional fixnum fixnum) string))

(string-null? (#(procedure #:clean #:enforce) string-null? (string) boolean)
              ((string) (##core#inline "C_zero_length_p" #(1))))

(string-pad (#(procedure #:clean #:enforce) string-pad (string fixnum #!optional char fixnum fixnum) string))
(string-pad-right (#(procedure #:clean #:enforce) string-pad-right (string fixnum #!optional char fixnum fixnum) string))
(string-parse-final-start+end (#(procedure #:enforce) string-parse-final-start+end (procedure string #!rest) . *))
(string-parse-start+end (#(procedure #:enforce) string-parse-start+end (procedure string #!rest) . *))
(string-prefix-ci? (#(procedure #:clean #:enforce) string-prefix-ci? (string string #!optional fixnum fixnum fixnum fixnum) boolean))
(string-prefix-length (#(procedure #:clean #:enforce) string-prefix-length (string string #!optional fixnum fixnum fixnum fixnum) fixnum))
(string-prefix-length-ci (#(procedure #:clean #:enforce) string-prefix-length-ci (string string #!optional fixnum fixnum fixnum fixnum) fixnum))
(string-prefix? (#(procedure #:clean #:enforce) string-prefix? (string string #!optional fixnum fixnum fixnum fixnum) boolean))
(string-replace (#(procedure #:clean #:enforce) string-replace (string string fixnum fixnum #!optional fixnum fixnum) string))
(string-reverse (#(procedure #:clean #:enforce) string-reverse (string #!optional fixnum fixnum) string))
(string-reverse! (#(procedure #:clean #:enforce) string-reverse! (string #!optional fixnum fixnum) string))

(string-skip
 (#(procedure #:enforce)
  string-skip
  (string (or char (struct char-set) (procedure (char) *)) #!optional fixnum fixnum)
  (or fixnum false)))

(string-skip-right
 (#(procedure #:enforce)
  string-skip-right
  (string (or char (struct char-set) (procedure (char) *)) #!optional fixnum fixnum)
  (or fixnum false)))

(string-suffix-ci? (#(procedure #:clean #:enforce) string-suffix-ci? (string string #!optional fixnum fixnum fixnum fixnum) boolean))
(string-suffix-length (#(procedure #:clean #:enforce) string-suffix-length (string string #!optional fixnum fixnum fixnum fixnum) fixnum))
(string-suffix-length-ci (#(procedure #:clean #:enforce) string-suffix-length-ci (string string #!optional fixnum fixnum fixnum fixnum) fixnum))
(string-suffix? (#(procedure #:clean #:enforce) string-suffix? (string string #!optional fixnum fixnum fixnum fixnum) boolean))
(string-tabulate (#(procedure #:enforce) string-tabulate ((procedure (fixnum) char) fixnum) string))
(string-take (#(procedure #:clean #:enforce) string-take (string fixnum) string))
(string-take-right (#(procedure #:clean #:enforce) string-take-right (string fixnum) string))
(string-titlecase (#(procedure #:clean #:enforce) string-titlecase (string #!optional fixnum fixnum) string))
(string-titlecase! (#(procedure #:clean #:enforce) string-titlecase! (string #!optional fixnum fixnum) string))

(string-tokenize
 (#(procedure #:clean #:enforce) string-tokenize (string #!optional (struct char-set) fixnum fixnum) list))

(string-trim
 (#(procedure #:enforce)
  string-trim
  (string #!optional (or char (struct char-set) (procedure (char) *)) fixnum fixnum)
  string))

(string-trim-both
 (#(procedure #:enforce)
  string-trim-both
  (string #!optional (or char (struct char-set) (procedure (char) *)) fixnum fixnum)
  string))

(string-trim-right
 (#(procedure #:enforce)
  string-trim-right
  (string #!optional (or char (struct char-set) (procedure (char) *)) fixnum fixnum)
  string))

(string-unfold (#(procedure #:enforce) string-unfold (procedure procedure procedure * #!optional * procedure) string)) ;XXX
(string-unfold-right (#(procedure #:enforce) string-unfold-right (procedure procedure procedure * #!optional * procedure) string)) ;XXX
(string-upcase (#(procedure #:clean #:enforce) string-upcase (string #!optional fixnum fixnum) string))
(string-upcase! (#(procedure #:clean #:enforce) string-upcase! (string #!optional fixnum fixnum) string))
(string-xcopy! (#(procedure #:clean #:enforce) string-xcopy! (string string string fixnum #!optional fixnum fixnum fixnum) string))

(string< (#(procedure #:clean #:enforce) string< (string string #!optional fixnum fixnum fixnum fixnum) boolean)
         ((string string) (string<? #(1) #(2))))

(string<= (#(procedure #:clean #:enforce) string<= (string string #!optional fixnum fixnum fixnum fixnum) boolean)
          ((string string) (string<=? #(1) #(2))))

(string<> (#(procedure #:clean #:enforce) string<> (string string #!optional fixnum fixnum fixnum fixnum) boolean)
          ((string string) (not (##core#inline "C_i_string_equal_p" #(1) #(2)))))

(string= (#(procedure #:clean #:enforce) string= (string string #!optional fixnum fixnum fixnum fixnum) boolean)
         ((string string) (##core#inline "C_i_string_equal_p" #(1) #(2))))

(string> (#(procedure #:clean #:enforce) string> (string string #!optional fixnum fixnum fixnum fixnum) boolean)
         ((string string) (string>? #(1) #(2))))

(string>= (#(procedure #:clean #:enforce) string>= (string string #!optional fixnum fixnum fixnum fixnum) boolean)
          ((string string) (string>=? #(1) #(2))))

(substring-spec-ok? (#(procedure #:clean #:enforce) substring-spec-ok? (string fixnum fixnum) boolean))
(substring/shared (#(procedure #:clean #:enforce) substring/shared (string fixnum #!optional fixnum) string))
(xsubstring (#(procedure #:clean #:enforce) xsubstring (string fixnum #!optional fixnum fixnum fixnum) string))
